 function [ h_P_t, h_w_t, h_e_t, ...
           S_P_t, S_w_t, S_e_t, ...
           flux_edges_dyn_t, kill ] = surface_main( h_P, S_P, x_P, x_w, x_e, ...
                                                  dx_P, dx_w, dx_e, ...
                                                  B_P, B_w, B_e, W_P, W_w, W_e,  ...
                                                  E_P, E_w, E_e, ...
                                                  fs_P, fs_w, fs_e, ...
                                                  A_eff_edges, ...
                                                  b_dot_P, ...
                                                  b_dot_edges_SS, b_dot_edges, ...
                                                  b_dot_P_all, b_dot_edges_all, ...
                                                  Q_out_L_SS, Q_out_R_SS, ...
                                                  S_at_GL, Q_external_L, Q_external_R, ...
                                                  dt_P, t_P, i_time, ...
                                                  deformation_only, deformation_plus_sliding, sliding_only)                             


%--------------------------------------------------------------------------
%
% Michelle Koutnik 
% last updated: APRIL 2010, Copenhagen

% Steps:
% 1) check_recalc_impulse_response.m
% 2) calc_impulse_response.m
% 3) implicit_solver2 (for limited domain)


% IRF  = Impulse Response Function
% bdot = accumulation rate 

%--------------------------------------------------------------------------


global solver_method    % to use explicit or other implicit options
                        % (1), (2), (3) - implicit; (4) explicit
                        % only implicit 2 is working :)
% global all_IRF          % 1 = uniform perturbation for IRF
%                         % 2 = spike perturbation for IRF
% 
% 
% 
% 
% full_domain = 0;   % 1 = full domain; 0 = limited domain
% % set this to zero here in case IRF is not recalculated
% % However, *always* using the full domain to calculate the IRF, and 
% % 'full_domain' flag is reset to 1 if the IRF is being calculated.
% 
% 
% 
% 
% 
% 
% % -------------------------------------------------------------------------
% % 1. check to recalculate impulse response
% % -------------------------------------------------------------------------
% 
% 
% if (i_time == 2)         % recalculate the IRF on the first timestep.
%     
% 
%   for all_IRF = 1:2      % calculate IRF for uniform perturbation 
%                          % and divide perturbation
% 
%                      
% 
% % check if need to recalculate response function
% % ===============================================
% % will return value of 1 (yes), or 0 (no)
% 
%   [ recalc_impulse_response ] = check_recalc_impulse_response( all_IRF, ...
%                                                                calculating_jacobians, ...
%                                                                force_calc_IRF );
% 
%                                                            
%   
%   
% 
%   if (recalc_impulse_response == 1)  % IRF should be recalculated.
% 
% % -------------------------------------------------------------------------
% % 2. calculate impulse response function
% % -------------------------------------------------------------------------
% 
% 
%  [ q1_on_dt_L_vol, ...
%    q1_on_dt_R_vol, ...
%    q1_on_dt_L_div, ...
%    q1_on_dt_R_div ] = calc_impulse_response ( h_P, x_P, t_P, b_dot_P, ...
%                                               x_e, x_w, dx_P, dx_e, dx_w, ...
%                                               B_P, W_P, slip_P, ...
%                                               A_eff_edges(1,:), ...
%                                               Q_out_L_SS, Q_out_R_SS, ...
%                                               Q_external_L, Q_external_R, ...
%                                               divide_pos_P_SS, ...
%                                               divide_pos_real_SS, ...
%                                               divide_pos_P, ...
%                                               i_time, dt_P, ...
%                                               u_bar_edges(1,:), ...
%                                               b_dot_edges_all, ...
%                                               b_dot_P_all);                   
%                   
% 
%                       
% % calc_impulse_response generates mat files:
% % ------------------------------------------
% %       ldm_extension.mat
% %       ss_values.mat
% %       impulse_values.mat
% %       all_impulse_response_function_values_div.mat
% %       all_impulse_response_function_values_vol.mat
% %       q1_on_dt_div.mat
% %       q1_on_dt_vol.mat
%        
%    
% 
% 
% 
%   elseif (recalc_impulse_response == 0)    % just reload existing files.
%     
%     
%     load q1_on_dt_vol.mat
% 
%       q1_on_dt_L_vol = q1_on_dt_L;
%       q1_on_dt_R_vol = q1_on_dt_R;
% 
%     load q1_on_dt_div.mat
% 
%       q1_on_dt_L_div = q1_on_dt_L;
%       q1_on_dt_R_div = q1_on_dt_R;
%       
% 
%   end  % end if statement on recalc_impulse_response
% 
% 
% 
% 
%   end   % for loop on all_IRF
% 
% 
% end   % if statement on i_time  -- only calculate or load IRF at time = 2.





% -------------------------------------------------------------------------
% 3. calculate ice-surface evolution
% -------------------------------------------------------------------------


% _________________________________________________________________________

% NEED TO DEBUG. IT MAY NEVER WORK.
% -----------------
% IMPLICIT METHOD 1
% -----------------


if (solver_method == 1)    


% [S_P, flux_x_t, Q_out, ...
%  S_edges, H_P, dS_dx, ...
%  H_dot, S_dot, ...
%  convolution_prod] = implicit_solver1( S_P, H_P, dS_dx_t, S_dot, H_dot, ...
%                                       A_eff, u_bar, Q_in, Q_out, ...
%                                       b_dot_edges, b_dot_P, flux_x_t, ...
%                                       x_edges, x_P, x_w, x_e, dx_P, ...
%                                       dx_w, dx_e, B_P, B_w, B_e, W_P, ...
%                                       W_w, W_e, slip_w, slip_e, i_time, ...
%                                       itnum_dT, convolution_prod, t_P );
                                  
                                  
% _________________________________________________________________________


% WORKING METHOD!         
% ------------------
% IMPLICIT METHOD 2
% ------------------


elseif (solver_method == 2)
    
    
  [ h_P_t, h_w_t, h_e_t, ...
    S_P_t, S_w_t, S_e_t, ...   
    flux_edges_dyn_t, kill  ] = implicit_solver2( h_P, S_P, ...
                                             x_P, x_w, x_e, ...
                                             dx_P, dx_w, dx_e, ...
                                             B_P, B_w, B_e, W_P, W_w, W_e,  ...
                                             E_P, E_w, E_e, ...
                                             fs_P, fs_w, fs_e, ...
                                             A_eff_edges, b_dot_P, ...
                                             b_dot_edges_SS, b_dot_edges, ...
                                             Q_out_L_SS, Q_out_R_SS, ...
                                             Q_external_L, Q_external_R, ...
                                             S_at_GL, ...
                                             t_P, dt_P, i_time, ...
                                             deformation_only, deformation_plus_sliding, sliding_only);
                         
    if kill==1
        return
    end
% _________________________________________________________________________

% NEED TO DEBUG. IT MAY NEVER WORK.
% ------------------
% IMPLICIT METHOD 3
% ------------------


 elseif (solver_method == 3)

% 
%  [S_P, flux_x_t, Q_out, ...
%  S_edges, H_P, dS_dx, ...
%  H_dot, S_dot, ...
%  convolution_prod] = implicit_solver3( S_P, H_P, dS_dx_t, S_dot, H_dot, ...
%                                       A_eff, u_bar, Q_in, Q_out, ...
%                                       b_dot_edges, b_dot_P, flux_x_t, ...
%                                       x_edges, x_P, x_w, x_e, dx_P, ...
%                                       dx_w, dx_e, B_P, B_w, B_e, W_P, ...
%                                       W_w, W_e, slip_w, slip_e, i_time, ...
%                                       itnum_dT, convolution_prod, t_P );         
    
% _________________________________________________________________________
    
                 
% ONLY MEANT TO BE USED TO VALIDATE IMPLICIT SOLUTION. 
% REQUIRES VERY SMALL TIMESTEPS (set in load_mesh.m)

% ---------------
% EXPLICIT METHOD
% ---------------

elseif (solver_method == 4)

 
% impulse response function needs to be calculated before explicit
% solver can be called.
    
% Only pass values at previous timestep (known)...

 [ h_P_t, h_w_t, h_e_t, ...
   S_P_t, S_w_t, S_e_t, ...   
   flux_edges_dyn_t   ] = explicit_solver( h_P, S_P, ...
                                           x_P, x_w, x_e, ...
                                           dx_P, dx_w, dx_e, ...
                                           B_P, B_w, B_e, W_P, W_w, W_e,  ...
                                           fd_P, fd_w, fd_e, ...
                                           A_eff_edges(1,:), b_dot_P(1,:), ...
                                           b_dot_edges_SS, b_dot_edges(1,:), ...
                                           Q_out_L_SS, Q_out_R_SS, ...
                                           Q_external_L(1), Q_external_R(1), ...
                                           S_at_GL(1), t_P, dt_P, i_time);
                                 
                                    
end

     % need to output:
%           [h_P_t, h_w_t, h_e_t, ...
%            S_P_t, S_w_t, S_e_t, ...
%            flux_edges_dyn_t, ...
%            flux_edges_kin_t, ...
%            vol_change_L_t, ...
%            vol_change_R_t, ...
%            div_change_t, ...
%            Q_out_L_t, ...
%            Q_out_R_t, ...
%            x_divide_pos_t, ...
%            x_divide_real_t, ...
%            q1_on_dt_L_vol, ...
%            q1_on_dt_R_vol, ...
%            q1_on_dt_L_div, ...
%            q1_on_dt_R_div]


% _________________________________________________________________________



